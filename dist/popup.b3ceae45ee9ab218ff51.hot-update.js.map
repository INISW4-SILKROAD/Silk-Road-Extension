{"version":3,"file":"popup.b3ceae45ee9ab218ff51.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAG0B;AAC4B;AACxB;AAE9B,IAAME,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;EACtB;EACA,IAAMC,SAAS,GAAG;IAChBC,QAAQ,EAAE,CAAC;IAAE;IACbC,SAAS,EAAE,CAAC;IAAE;IACdC,SAAS,EAAE,CAAC;IAAE;IACdC,UAAU,EAAE,CAAC,CAAE;EACjB,CAAC;;EAED;EACA,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,KAAK,EAAK;IAC7B,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;IACjC,OAAO,SAAS;EAClB,CAAC;EAED,oBACET,0DAAA;IAAKW,SAAS,EAAC;EAAY,gBACzBX,0DAAA,aAAI,2BAAS,CAAC,EACbY,MAAM,CAACC,OAAO,CAACV,SAAS,CAAC,CAACW,GAAG,CAAC,UAAAC,IAAA;IAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;MAAEG,GAAG,GAAAF,KAAA;MAAEG,KAAK,GAAAH,KAAA;IAAA,oBACzChB,0DAAA;MAAKW,SAAS,EAAC,WAAW;MAACO,GAAG,EAAEA;IAAI,gBAClClB,0DAAA,eAAOkB,GAAU,CAAC,eAClBlB,0DAAA;MAAKW,SAAS,EAAC;IAAsB,gBACnCX,0DAAA,CAACC,mEAAW;MAACmB,GAAG,EAAGD,KAAK,GAAG,CAAC,GAAI,GAAI;MAACE,KAAK,EAAE;QAAEC,eAAe,EAAEd,WAAW,CAACW,KAAK;MAAE;IAAE,CAAE,CAAC,eACvFnB,0DAAA;MAAKW,SAAS,EAAC;IAAO,GACnBY,kBAAA,CAAIC,KAAK,CAAC,CAAC,CAAC,EAAEV,GAAG,CAAC,UAACW,CAAC,EAAEC,CAAC;MAAA,oBACtB1B,0DAAA;QAAKkB,GAAG,EAAEQ,CAAE;QAACf,SAAS,EAAC,MAAM;QAACU,KAAK,EAAE;UAAEM,IAAI,KAAAC,MAAA,CAAMF,CAAC,GAAG,CAAC,GAAI,GAAG;QAAI;MAAE,CAAE,CAAC;IAAA,CACvE,CACE,CACF,CAAC,eACN1B,0DAAA,eAAOkB,GAAG,KAAK,KAAK,GAAG,MAAM,GAAGA,GAAG,KAAK,WAAW,GAAG,MAAM,GAAGA,GAAG,KAAK,WAAW,GAAG,KAAK,GAAG,QAAe,CACzG,CAAC;EAAA,CACP,CACE,CAAC;AAEV,CAAC;AAED,iEAAehB,SAAS;;;;;;;;UC7HxB","sources":["webpack://silkroad/./src/popup/components/TouchInfo.jsx","webpack://silkroad/webpack/runtime/getFullHash"],"sourcesContent":["// import React from 'react';\n// import '../css/TouchInfo.css';\n\n// const TouchInfo = () => {\n//   return (\n//     <div className=\"touch-info\">\n//       <h2>촉감 정보</h2>\n//       <div className=\"touch-bar\">\n//         <span>딱딱한</span>\n//         <div className=\"bar red\"></div>\n//         <span>부드러운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>거친</span>\n//         <div className=\"bar green\"></div>\n//         <span>매끄러운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>얇은</span>\n//         <div className=\"bar blue\"></div>\n//         <span>두꺼운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>신축성 없는</span>\n//         <div className=\"bar purple\"></div>\n//         <span>신축성 있는</span>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TouchInfo;\n\n// import React from 'react';\n// import '../css/TouchInfo.css';\n\n// const TouchInfo = () => {\n//   // 임시로 사용할 촉감 데이터 (1~5점)\n//   const touchData = {\n//     hardness: 3, // 딱딱함 정도\n//     roughness: 2, // 거칠음 정도\n//     thickness: 4, // 두꺼움 정도\n//     elasticity: 5, // 신축성 정도\n//   };\n\n//   // 점수에 따른 색상 및 길이 설정\n//   const getBarStyle = (score, color) => ({\n//     width: `${(score / 5) * 100}%`,\n//     backgroundColor: color,\n//     opacity: score / 5,\n//   });\n\n//   return (\n//     <div className=\"touch-info\">\n//       <h2>촉감 정보</h2>\n//       <div className=\"touch-bar\">\n//         <span>딱딱한</span>\n//         <div className=\"bar\" style={getBarStyle(touchData.hardness, 'red')}></div>\n//         <span>부드러운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>거친</span>\n//         <div className=\"bar\" style={getBarStyle(touchData.roughness, 'green')}></div>\n//         <span>매끄러운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>얇은</span>\n//         <div className=\"bar\" style={getBarStyle(touchData.thickness, 'blue')}></div>\n//         <span>두꺼운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>신축성 없는</span>\n//         <div className=\"bar\" style={getBarStyle(touchData.elasticity, 'purple')}></div>\n//         <span>신축성 있는</span>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TouchInfo;\n\n\nimport React from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport '../css/TouchInfo.css';\n\nconst TouchInfo = () => {\n  // 임시로 사용할 촉감 데이터 (1~5점)\n  const touchData = {\n    hardness: 1, // 딱딱함 정도\n    roughness: 2, // 거칠음 정도\n    thickness: 4, // 두꺼움 정도\n    elasticity: 5, // 신축성 정도\n  };\n\n  // 점수에 따른 색상 설정\n  const getBarColor = (score) => {\n    if (score === 1) return '#ffcccc';\n    if (score === 2) return '#ff9999';\n    if (score === 3) return '#ff6666';\n    if (score === 4) return '#ff3333';\n    return '#ff0000';\n  };\n\n  return (\n    <div className=\"touch-info\">\n      <h2>촉감 정보</h2>\n      {Object.entries(touchData).map(([key, value]) => (\n        <div className=\"touch-bar\" key={key}>\n          <span>{key}</span>\n          <div className=\"progress-bar-wrapper\">\n            <ProgressBar now={(value / 5) * 100} style={{ backgroundColor: getBarColor(value) }} />\n            <div className=\"ticks\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"tick\" style={{ left: `${(i / 5) * 100}%` }} />\n              ))}\n            </div>\n          </div>\n          <span>{key === '딱딱한' ? '부드러운' : key === 'roughness' ? '매끄러운' : key === 'thickness' ? '두꺼운' : '신축성 있는'}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TouchInfo;\n","__webpack_require__.h = () => (\"2946522dec0d28815613\")"],"names":["React","ProgressBar","TouchInfo","touchData","hardness","roughness","thickness","elasticity","getBarColor","score","createElement","className","Object","entries","map","_ref","_ref2","_slicedToArray","key","value","now","style","backgroundColor","_toConsumableArray","Array","_","i","left","concat"],"sourceRoot":""}