{"version":3,"file":"popup.4f8250f08071904e8b63.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMmD;AACG;AAC5B;AACI;AACI;AAElC,IAAMM,SAAS,GAAG,SAAZA,SAASA,CAAAC,IAAA,EAAkC;EAAA,IAA5BC,SAAS,GAAAD,IAAA,CAATC,SAAS;IAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;EACxC,IAAAC,SAAA,GAAkCR,+CAAQ,CAAC;MACzCS,QAAQ,EAAE,CAAC;MACXC,UAAU,EAAE,CAAC;MACbC,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE;IACf,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,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","sources":["webpack://silkroad/./src/popup/components/TouchInfo.jsx","webpack://silkroad/webpack/runtime/getFullHash"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import ProgressBar from 'react-bootstrap/ProgressBar';\r\n// import axios from 'axios';\r\n// import '../css/TouchInfo.css';\r\n\r\n// const TouchInfo = ({ productId }) => {\r\n//   const [touchData, setTouchData] = useState({\r\n//     softness: 0,\r\n//     smoothness: 0,\r\n//     thickness: 0,\r\n//     flexibility: 0\r\n//   });\r\n\r\n//   const labelMapping = {\r\n//     softness: '부드러움',\r\n//     smoothness: '매끄러움',\r\n//     thickness: '두께',\r\n//     flexibility: '신축성'\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (productId) {\r\n//       const fetchTouchData = async () => {\r\n//         try {\r\n//           const response = await axios.get(`http://127.0.0.1:5001/goods/${productId}`);\r\n//           const data = response.data;\r\n//           console.log(\"서버에서 받은 촉감 데이터:\", data);\r\n\r\n//           if (data) {\r\n//             setTouchData({\r\n//               softness: data.SOFTNESS || 0,\r\n//               smoothness: data.SMOOTHNESS || 0,\r\n//               thickness: data.THICKNESS || 0,\r\n//               flexibility: data.FLEXIBILITY || 0\r\n//             });\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"촉감 데이터를 불러오는 중 에러 발생:\", error);\r\n//         }\r\n//       };\r\n\r\n//       fetchTouchData();\r\n//     }\r\n//   }, [productId]);\r\n\r\n//   const colorMapping = {\r\n//     softness: '#FFDBDA',\r\n//     smoothness: '#FFDBDA',\r\n//     thickness: '#FFDBDA',\r\n//     flexibility: '#FFDBDA'\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"touch-info\">\r\n//       <div className='touch-info-text'>\r\n//       </div>\r\n//       <div className='touch-area'>\r\n//         {Object.keys(touchData).map((key) => (\r\n//           <div key={key} className=\"touch-bar\">\r\n//             <span>{labelMapping[key]}</span>\r\n//             <div className=\"progress-bar-wrapper\">\r\n//               <ProgressBar\r\n//                 now={(touchData[key] / 5) * 100}\r\n//                 className=\"custom-progress-bar\"\r\n//                 style={{\r\n//                   backgroundColor: 'transparent',\r\n//                   backgroundImage: `linear-gradient(to right, ${colorMapping[key]} 0%, ${colorMapping[key]} ${(touchData[key] / 5) * 100}%, #ffffff ${(touchData[key] / 5) * 100}%, #ffffff 100%)`\r\n//                 }}\r\n//               />\r\n//               <div className=\"ticks\">\r\n//                 {[...Array(6)].map((_, i) => (\r\n//                   <div key={i} className=\"tick\" style={{ left: `${(i / 5) * 100}%` }} />\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TouchInfo;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import ProgressBar from 'react-bootstrap/ProgressBar';\r\n// import axios from 'axios';\r\n// import '../css/TouchInfo.css';\r\n// import io from 'socket.io-client';\r\n\r\n// const TouchInfo = ({ productId, dataSource }) => {\r\n//   const [touchData, setTouchData] = useState({\r\n//     softness: 0,\r\n//     smoothness: 0,\r\n//     thickness: 0,\r\n//     flexibility: 0\r\n//   });\r\n\r\n//   const labelMapping = {\r\n//     softness: '부드러움',\r\n//     smoothness: '매끄러움',\r\n//     thickness: '두께',\r\n//     flexibility: '신축성'\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const fetchTouchDataFromServer = async () => {\r\n//       try {\r\n//         const response = await axios.get(`http://127.0.0.1:5001/goods/${productId}`);\r\n//         const data = response.data;\r\n//         console.log(\"서버에서 받은 촉감 데이터:\", data);\r\n//         setTouchData({\r\n//           softness: data.SOFTNESS + 1,\r\n//           smoothness: data.SMOOTHNESS + 1,\r\n//           thickness: data.THICKNESS + 1,\r\n//           flexibility: data.FLEXIBILITY + 1\r\n//         });\r\n//       } catch (error) {\r\n//         console.error(\"촉감 데이터를 불러오는 중 에러 발생:\", error);\r\n//       }\r\n//     };\r\n\r\n//     if (dataSource === 'model') {\r\n//       const socket = io('http://127.0.0.1:5001');\r\n//       socket.on('connect', () => {\r\n//         console.log('Socket connected');\r\n//         socket.emit('joinRoom', productId);\r\n//       });\r\n\r\n//       socket.on('touchInfo', (data) => {\r\n//         console.log('Received touch info from server:', data);\r\n//         setTouchData({\r\n//           softness: data.touchInfo[0],\r\n//           smoothness: data.touchInfo[1],\r\n//           thickness: data.touchInfo[2],\r\n//           flexibility: data.touchInfo[3]\r\n//         });\r\n//       });\r\n\r\n//       socket.on('disconnect', () => {\r\n//         console.log('Socket disconnected');\r\n//       });\r\n\r\n//       return () => {\r\n//         socket.disconnect();\r\n//       };\r\n//     } else if (dataSource === 'search') {\r\n//       fetchTouchDataFromServer();\r\n//     }\r\n//   }, [productId, dataSource]);\r\n\r\n//   const colorMapping = {\r\n//     softness: '#FFDBDA',\r\n//     smoothness: '#FFDBDA',\r\n//     thickness: '#FFDBDA',\r\n//     flexibility: '#FFDBDA'\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"touch-info\">\r\n//       <div className='touch-info-text'>\r\n//       </div>\r\n//       <div className='touch-area'>\r\n//         {Object.keys(touchData).map((key) => (\r\n//           <div key={key} className=\"touch-bar\">\r\n//             <span>{labelMapping[key]}</span>\r\n//             <div className=\"progress-bar-wrapper\">\r\n//               <ProgressBar\r\n//                 now={(touchData[key] / 5) * 100}\r\n//                 className=\"custom-progress-bar\"\r\n//                 style={{\r\n//                   backgroundColor: 'transparent',\r\n//                   backgroundImage: `linear-gradient(to right, ${colorMapping[key]} 0%, ${colorMapping[key]} ${(touchData[key] / 5) * 100}%, #ffffff ${(touchData[key] / 5) * 100}%, #ffffff 100%)`\r\n//                 }}\r\n//               />\r\n//               <div className=\"ticks\">\r\n//                 {[...Array(6)].map((_, i) => (\r\n//                   <div key={i} className=\"tick\" style={{ left: `${(i / 5) * 100}%` }} />\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TouchInfo;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport axios from 'axios';\r\nimport '../css/TouchInfo.css';\r\nimport io from 'socket.io-client';\r\n\r\nconst TouchInfo = ({ productId, dataSource }) => {\r\n  const [touchData, setTouchData] = useState({\r\n    softness: 0,\r\n    smoothness: 0,\r\n    thickness: 0,\r\n    flexibility: 0\r\n  });\r\n\r\n  const labelMapping = {\r\n    softness: '부드러움',\r\n    smoothness: '매끄러움',\r\n    thickness: '두께',\r\n    flexibility: '신축성'\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(`Joining room for product ${productId}`);\r\n    const socket = io('http://127.0.0.1:5001');\r\n    socket.emit('joinRoom', productId);\r\n\r\n    socket.on('touchInfo', (data) => {\r\n      console.log('Received touch data:', data);\r\n      if (data.productId === productId) {\r\n        setTouchData({\r\n          softness: data.touchInfo[0],\r\n          smoothness: data.touchInfo[1],\r\n          thickness: data.touchInfo[2],\r\n          flexibility: data.touchInfo[3]\r\n        });\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [productId]);\r\n\r\n  const colorMapping = {\r\n    softness: '#FFDBDA',\r\n    smoothness: '#FFDBDA',\r\n    thickness: '#FFDBDA',\r\n    flexibility: '#FFDBDA'\r\n  };\r\n\r\n  return (\r\n    <div className=\"touch-info\">\r\n      <div className='touch-info-text'>\r\n      </div>\r\n      <div className='touch-area'>\r\n        {Object.keys(touchData).map((key) => (\r\n          <div key={key} className=\"touch-bar\">\r\n            <span>{labelMapping[key]}</span>\r\n            <div className=\"progress-bar-wrapper\">\r\n              <ProgressBar\r\n                now={(touchData[key] / 5) * 100}\r\n                className=\"custom-progress-bar\"\r\n                style={{\r\n                  backgroundColor: 'transparent',\r\n                  backgroundImage: `linear-gradient(to right, ${colorMapping[key]} 0%, ${colorMapping[key]} ${(touchData[key] / 5) * 100}%, #ffffff ${(touchData[key] / 5) * 100}%, #ffffff 100%)`\r\n                }}\r\n              />\r\n              <div className=\"ticks\">\r\n                {[...Array(6)].map((_, i) => (\r\n                  <div key={i} className=\"tick\" style={{ left: `${(i / 5) * 100}%` }} />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TouchInfo;\r\n","__webpack_require__.h = () => (\"173649c31579f97a00f3\")"],"names":["React","useEffect","useState","ProgressBar","axios","io","TouchInfo","_ref","productId","dataSource","_useState","softness","smoothness","thickness","flexibility","_useState2","_slicedToArray","touchData","setTouchData","labelMapping","console","log","concat","socket","emit","on","data","touchInfo","disconnect","colorMapping","createElement","className","Object","keys","map","key","now","style","backgroundColor","backgroundImage","_toConsumableArray","Array","_","i","left"],"sourceRoot":""}