{"version":3,"file":"popup.3e9345e944d78f0f891e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEmD;AAEnD,IAAMG,SAAS,GAAG,SAAZA,SAASA,CAAAC,IAAA,EAAsB;EAAA,IAAhBC,SAAS,GAAAD,IAAA,CAATC,SAAS;EAC5B,IAAAC,SAAA,GAA8BJ,+CAAQ,CAAC,IAAI,CAAC;IAAAK,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAC1B,IAAAI,UAAA,GAAkCT,+CAAQ,CAAC,IAAI,CAAC;IAAAU,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAzCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAE9BX,gDAAS,CAAC,YAAM;IACd,IAAII,SAAS,EAAE;MACb;MACAU,MAAM,CAACC,OAAO,CAACC,WAAW,CACxB;QAAEC,MAAM,EAAE,gBAAgB;QAAEb,SAAS,EAATA;MAAU,CAAC,EACvC,UAACc,QAAQ,EAAK;QACZ,IAAIA,QAAQ,CAACC,IAAI,EAAE;UACjBN,YAAY,CAACK,QAAQ,CAACC,IAAI,CAACP,SAAS,CAAC;UACrCH,UAAU,CAAC,KAAK,CAAC;QACnB,CAAC,MAAM;UACLW,OAAO,CAACC,KAAK,CAACH,QAAQ,CAACG,KAAK,CAAC;UAC7BZ,UAAU,CAAC,KAAK,CAAC;QACnB;MACF,CACF,CAAC;IACH;EACF,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;EAEf,IAAII,OAAO,EAAE;IACX,oBAAOT,0DAAA,cAAK,8BAAiC,CAAC;EAChD;EAEA,IAAI,CAACa,SAAS,EAAE;IACd,oBAAOb,0DAAA,cAAK,yGAA4B,CAAC;EAC3C;EAEA,IAAMwB,YAAY,GAAGX,SAAS,CAACY,GAAG,CAAC,UAACC,KAAK,EAAEC,KAAK;IAAA,oBAC9C3B,0DAAA;MAAK4B,GAAG,EAAED;IAAM,gBACd3B,0DAAA,cAAK,UAAQ,EAAC2B,KAAK,GAAG,CAAO,CAAC,eAC9B3B,0DAAA;MAAK6B,SAAS,EAAC,cAAc;MAACC,KAAK,EAAE;QAAEC,KAAK,KAAAC,MAAA,CAAK,CAACN,KAAK,GAAG,CAAC,IAAI,EAAE;MAAI;IAAE,CAAM,CAC1E,CAAC;EAAA,CACP,CAAC;EAEF,oBACE1B,0DAAA,2BACEA,0DAAA,aAAI,mBAAqB,CAAC,EACzBwB,YACE,CAAC;AAEV,CAAC;AAED,iEAAerB,SAAS;;;;;;;;UCnIxB","sources":["webpack://silkroad/./src/popup/components/TouchInfo.jsx","webpack://silkroad/webpack/runtime/getFullHash"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import ProgressBar from 'react-bootstrap/ProgressBar';\r\n// import axios from 'axios';\r\n// import '../css/TouchInfo.css';\r\n\r\n// const TouchInfo = ({ productId }) => {\r\n//   const [touchData, setTouchData] = useState({\r\n//     softness: 0,\r\n//     smoothness: 0,\r\n//     thickness: 0,\r\n//     flexibility: 0\r\n//   });\r\n\r\n//   const labelMapping = {\r\n//     softness: '부드러움',\r\n//     smoothness: '매끄러움',\r\n//     thickness: '두께',\r\n//     flexibility: '신축성'\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (productId) {\r\n//       const fetchTouchData = async () => {\r\n//         try {\r\n//           const response = await axios.get(`http://127.0.0.1:5001/goods/${productId}`);\r\n//           const data = response.data;\r\n//           console.log(\"서버에서 받은 촉감 데이터:\", data);\r\n\r\n//           if (data) {\r\n//             setTouchData({\r\n//               softness: data.SOFTNESS || 0,\r\n//               smoothness: data.SMOOTHNESS || 0,\r\n//               thickness: data.THICKNESS || 0,\r\n//               flexibility: data.FLEXIBILITY || 0\r\n//             });\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"촉감 데이터를 불러오는 중 에러 발생:\", error);\r\n//         }\r\n//       };\r\n\r\n//       fetchTouchData();\r\n//     }\r\n//   }, [productId]);\r\n\r\n//   const colorMapping = {\r\n//     softness: '#FFDBDA',\r\n//     smoothness: '#FFDBDA',\r\n//     thickness: '#FFDBDA',\r\n//     flexibility: '#FFDBDA'\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"touch-info\">\r\n//       <div className='touch-info-text'>\r\n//       </div>\r\n//       <div className='touch-area'>\r\n//         {Object.keys(touchData).map((key) => (\r\n//           <div key={key} className=\"touch-bar\">\r\n//             <span>{labelMapping[key]}</span>\r\n//             <div className=\"progress-bar-wrapper\">\r\n//               <ProgressBar\r\n//                 now={(touchData[key] / 5) * 100}\r\n//                 className=\"custom-progress-bar\"\r\n//                 style={{\r\n//                   backgroundColor: 'transparent',\r\n//                   backgroundImage: `linear-gradient(to right, ${colorMapping[key]} 0%, ${colorMapping[key]} ${(touchData[key] / 5) * 100}%, #ffffff ${(touchData[key] / 5) * 100}%, #ffffff 100%)`\r\n//                 }}\r\n//               />\r\n//               <div className=\"ticks\">\r\n//                 {[...Array(6)].map((_, i) => (\r\n//                   <div key={i} className=\"tick\" style={{ left: `${(i / 5) * 100}%` }} />\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TouchInfo;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst TouchInfo = ({ productId }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [touchInfo, setTouchInfo] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n      // chrome storage에서 데이터 가져오기\r\n      chrome.runtime.sendMessage(\r\n        { action: 'fetchTouchInfo', productId },\r\n        (response) => {\r\n          if (response.data) {\r\n            setTouchInfo(response.data.touchInfo);\r\n            setLoading(false);\r\n          } else {\r\n            console.error(response.error);\r\n            setLoading(false);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }, [productId]);\r\n\r\n  if (loading) {\r\n    return <div>Loading touch information...</div>;\r\n  }\r\n\r\n  if (!touchInfo) {\r\n    return <div>해당 상품의 촉감 정보를 알 수 없습니다.</div>;\r\n  }\r\n\r\n  const progressBars = touchInfo.map((value, index) => (\r\n    <div key={index}>\r\n      <div>Feature {index + 1}</div>\r\n      <div className=\"progress-bar\" style={{ width: `${(value + 1) * 20}%` }}></div>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <h2>Touch Information</h2>\r\n      {progressBars}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TouchInfo;\r\n\r\n","__webpack_require__.h = () => (\"627643cf3332020bad1a\")"],"names":["React","useEffect","useState","TouchInfo","_ref","productId","_useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","touchInfo","setTouchInfo","chrome","runtime","sendMessage","action","response","data","console","error","createElement","progressBars","map","value","index","key","className","style","width","concat"],"sourceRoot":""}