{"version":3,"file":"popup.543df505b41a37815b0d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMmD;AAEnD,IAAMG,SAAS,GAAG,SAAZA,SAASA,CAAAC,IAAA,EAAiC;EAAA,IAA3BC,SAAS,GAAAD,IAAA,CAATC,SAAS;IAAEC,SAAS,GAAAF,IAAA,CAATE,SAAS;EACvC,IAAAC,SAAA,GAA4CL,+CAAQ,CAACI,SAAS,CAAC;IAAAE,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxDG,cAAc,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EACxC,IAAAI,UAAA,GAA0BV,+CAAQ,CAAC,KAAK,CAAC;IAAAW,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAlCE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtBZ,gDAAS,CAAC,YAAM;IACd,IAAIK,SAAS,EAAE;MACbK,iBAAiB,CAACL,SAAS,CAACU,GAAG,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,GAAG,CAAC;MAAA,EAAC,CAAC;MAClDF,QAAQ,CAAC,KAAK,CAAC;IACjB,CAAC,MAAM;MACLJ,iBAAiB,CAAC,IAAI,CAAC;MACvBI,QAAQ,CAAC,IAAI,CAAC;IAChB;EACF,CAAC,EAAE,CAACT,SAAS,CAAC,CAAC;EAEf,IAAIQ,KAAK,IAAIT,SAAS,EAAE;IACtB,oBAAOL,0DAAA;MAAKmB,SAAS,EAAC;IAAe,GAAC,qFAAuB,CAAC;EAChE;EAEA,oBACEnB,0DAAA;IAAKmB,SAAS,EAAC;EAAsB,GAClCT,cAAc,GACbA,cAAc,CAACM,GAAG,CAAC,UAACI,KAAK,EAAEC,KAAK;IAAA,oBAC9BrB,0DAAA;MAAKsB,GAAG,EAAED,KAAM;MAACF,SAAS,EAAC;IAAiB,gBAC1CnB,0DAAA,gBAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAACqB,KAAK,CAAC,EAAC,GAAQ,CAAC,eACtDrB,0DAAA;MAAUoB,KAAK,EAAEA,KAAM;MAACG,GAAG,EAAC;IAAI,CAAW,CACxC,CAAC;EAAA,CACP,CAAC,gBAEFvB,0DAAA,cAAK,oEAAqB,CAEzB,CAAC;AAEV,CAAC;AAED,iEAAeG,SAAS;;;;;;;;UC5HxB","sources":["webpack://silkroad/./src/popup/components/TouchInfo.jsx","webpack://silkroad/webpack/runtime/getFullHash"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import ProgressBar from 'react-bootstrap/ProgressBar';\r\n// import axios from 'axios';\r\n// import '../css/TouchInfo.css';\r\n\r\n// const TouchInfo = ({ productId }) => {\r\n//   const [touchData, setTouchData] = useState({\r\n//     softness: 0,\r\n//     smoothness: 0,\r\n//     thickness: 0,\r\n//     flexibility: 0\r\n//   });\r\n\r\n//   const labelMapping = {\r\n//     softness: '부드러움',\r\n//     smoothness: '매끄러움',\r\n//     thickness: '두께',\r\n//     flexibility: '신축성'\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (productId) {\r\n//       const fetchTouchData = async () => {\r\n//         try {\r\n//           const response = await axios.get(`http://127.0.0.1:5001/goods/${productId}`);\r\n//           const data = response.data;\r\n//           console.log(\"서버에서 받은 촉감 데이터:\", data);\r\n\r\n//           if (data) {\r\n//             setTouchData({\r\n//               softness: data.SOFTNESS || 0,\r\n//               smoothness: data.SMOOTHNESS || 0,\r\n//               thickness: data.THICKNESS || 0,\r\n//               flexibility: data.FLEXIBILITY || 0\r\n//             });\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"촉감 데이터를 불러오는 중 에러 발생:\", error);\r\n//         }\r\n//       };\r\n\r\n//       fetchTouchData();\r\n//     }\r\n//   }, [productId]);\r\n\r\n//   const colorMapping = {\r\n//     softness: '#FFDBDA',\r\n//     smoothness: '#FFDBDA',\r\n//     thickness: '#FFDBDA',\r\n//     flexibility: '#FFDBDA'\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"touch-info\">\r\n//       <div className='touch-info-text'>\r\n//       </div>\r\n//       <div className='touch-area'>\r\n//         {Object.keys(touchData).map((key) => (\r\n//           <div key={key} className=\"touch-bar\">\r\n//             <span>{labelMapping[key]}</span>\r\n//             <div className=\"progress-bar-wrapper\">\r\n//               <ProgressBar\r\n//                 now={(touchData[key] / 5) * 100}\r\n//                 className=\"custom-progress-bar\"\r\n//                 style={{\r\n//                   backgroundColor: 'transparent',\r\n//                   backgroundImage: `linear-gradient(to right, ${colorMapping[key]} 0%, ${colorMapping[key]} ${(touchData[key] / 5) * 100}%, #ffffff ${(touchData[key] / 5) * 100}%, #ffffff 100%)`\r\n//                 }}\r\n//               />\r\n//               <div className=\"ticks\">\r\n//                 {[...Array(6)].map((_, i) => (\r\n//                   <div key={i} className=\"tick\" style={{ left: `${(i / 5) * 100}%` }} />\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TouchInfo;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst TouchInfo = ({ productId, touchInfo }) => {\r\n  const [localTouchInfo, setLocalTouchInfo] = useState(touchInfo);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (touchInfo) {\r\n      setLocalTouchInfo(touchInfo.map(info => info + 1));\r\n      setError(false);\r\n    } else {\r\n      setLocalTouchInfo(null);\r\n      setError(true);\r\n    }\r\n  }, [touchInfo]);\r\n\r\n  if (error && productId) {\r\n    return <div className=\"error-overlay\">촉감 정보를 가져올 수 없습니다.</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"touch-info-container\">\r\n      {localTouchInfo ? (\r\n        localTouchInfo.map((value, index) => (\r\n          <div key={index} className=\"touch-info-item\">\r\n            <label>{['부드러움', '두께', '매끄러움', '신축성'][index]}:</label>\r\n            <progress value={value} max=\"10\"></progress>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div>촉감 정보를 불러오는 중...</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TouchInfo;\r\n","__webpack_require__.h = () => (\"bae049f4034278c7fd03\")"],"names":["React","useEffect","useState","TouchInfo","_ref","productId","touchInfo","_useState","_useState2","_slicedToArray","localTouchInfo","setLocalTouchInfo","_useState3","_useState4","error","setError","map","info","createElement","className","value","index","key","max"],"sourceRoot":""}