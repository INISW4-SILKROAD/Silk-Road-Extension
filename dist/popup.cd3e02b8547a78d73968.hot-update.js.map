{"version":3,"file":"popup.cd3e02b8547a78d73968.hot-update.js","mappings":"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","sources":["webpack://silkroad/./src/popup/components/TouchInfo.jsx","webpack://silkroad/webpack/runtime/getFullHash"],"sourcesContent":["// import React from 'react';\n// import '../css/TouchInfo.css';\n\n// const TouchInfo = () => {\n//   return (\n//     <div className=\"touch-info\">\n//       <h2>촉감 정보</h2>\n//       <div className=\"touch-bar\">\n//         <span>딱딱한</span>\n//         <div className=\"bar red\"></div>\n//         <span>부드러운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>거친</span>\n//         <div className=\"bar green\"></div>\n//         <span>매끄러운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>얇은</span>\n//         <div className=\"bar blue\"></div>\n//         <span>두꺼운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>신축성 없는</span>\n//         <div className=\"bar purple\"></div>\n//         <span>신축성 있는</span>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TouchInfo;\n\n// import React from 'react';\n// import '../css/TouchInfo.css';\n\n// const TouchInfo = () => {\n//   // 임시로 사용할 촉감 데이터 (1~5점)\n//   const touchData = {\n//     hardness: 3, // 딱딱함 정도\n//     roughness: 2, // 거칠음 정도\n//     thickness: 4, // 두꺼움 정도\n//     elasticity: 5, // 신축성 정도\n//   };\n\n//   // 점수에 따른 색상 및 길이 설정\n//   const getBarStyle = (score, color) => ({\n//     width: `${(score / 5) * 100}%`,\n//     backgroundColor: color,\n//     opacity: score / 5,\n//   });\n\n//   return (\n//     <div className=\"touch-info\">\n//       <h2>촉감 정보</h2>\n//       <div className=\"touch-bar\">\n//         <span>딱딱한</span>\n//         <div className=\"bar\" style={getBarStyle(touchData.hardness, 'red')}></div>\n//         <span>부드러운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>거친</span>\n//         <div className=\"bar\" style={getBarStyle(touchData.roughness, 'green')}></div>\n//         <span>매끄러운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>얇은</span>\n//         <div className=\"bar\" style={getBarStyle(touchData.thickness, 'blue')}></div>\n//         <span>두꺼운</span>\n//       </div>\n//       <div className=\"touch-bar\">\n//         <span>신축성 없는</span>\n//         <div className=\"bar\" style={getBarStyle(touchData.elasticity, 'purple')}></div>\n//         <span>신축성 있는</span>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TouchInfo;\n\nimport React from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport '../css/TouchInfo.css';\n\nconst TouchInfo = () => {\n  // 임시로 사용할 촉감 데이터 (1~5점)\n  const touchData = {\n    hardness: 1, // 딱딱함 정도\n    roughness: 2, // 거칠음 정도\n    thickness: 4, // 두꺼움 정도\n    elasticity: 5, // 신축성 정도\n  };\n\n  // 점수에 따른 색상 설정\n  const getBarColor = (score, color) => {\n    const opacity = score / 5;\n    const hexOpacity = Math.round(opacity * 255).toString(16).padStart(2, '0');\n    return `${color}${hexOpacity}`;\n  };\n\n  // 촉감별 대표 색상 설정\n  const colorMapping = {\n    hardness: '#ff0000', // red\n    roughness: '#00ff00', // green\n    thickness: '#0000ff', // blue\n    elasticity: '#800080' // purple\n  };\n\n  return (\n    <div className=\"touch-info\">\n      <h2>촉감 정보</h2>\n      <div className=\"touch-bar\">\n        <span>딱딱한</span>\n        <div className=\"progress-bar-wrapper\">\n          <ProgressBar\n            now={(touchData.hardness / 5) * 100}\n            style={{\n              backgroundColor: 'transparent',\n              backgroundImage: `linear-gradient(to right, ${getBarColor(touchData.hardness, colorMapping.hardness)} 0%, ${getBarColor(touchData.hardness, colorMapping.hardness)} ${(touchData.hardness / 5) * 100}%, #ffffff ${(touchData.hardness / 5) * 100}%, #ffffff 100%)`\n            }}\n          />\n          <div className=\"ticks\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"tick\" style={{ left: `${(i / 5) * 100}%` }} />\n            ))}\n          </div>\n        </div>\n        <span>부드러운</span>\n      </div>\n      <div className=\"touch-bar\">\n        <span>거친</span>\n        <div className=\"progress-bar-wrapper\">\n          <ProgressBar\n            now={(touchData.roughness / 5) * 100}\n            style={{\n              backgroundColor: 'transparent',\n              backgroundImage: `linear-gradient(to right, ${getBarColor(touchData.roughness, colorMapping.roughness)} 0%, ${getBarColor(touchData.roughness, colorMapping.roughness)} ${(touchData.roughness / 5) * 100}%, #ffffff ${(touchData.roughness / 5) * 100}%, #ffffff 100%)`\n            }}\n          />\n          <div className=\"ticks\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"tick\" style={{ left: `${(i / 5) * 100}%` }} />\n            ))}\n          </div>\n        </div>\n        <span>매끄러운</span>\n      </div>\n      <div className=\"touch-bar\">\n        <span>얇은</span>\n        <div className=\"progress-bar-wrapper\">\n          <ProgressBar\n            now={(touchData.thickness / 5) * 100}\n            style={{\n              backgroundColor: 'transparent',\n              backgroundImage: `linear-gradient(to right, ${getBarColor(touchData.thickness, colorMapping.thickness)} 0%, ${getBarColor(touchData.thickness, colorMapping.thickness)} ${(touchData.thickness / 5) * 100}%, #ffffff ${(touchData.thickness / 5) * 100}%, #ffffff 100%)`\n            }}\n          />\n          <div className=\"ticks\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"tick\" style={{ left: `${(i / 5) * 100}%` }} />\n            ))}\n          </div>\n        </div>\n        <span>두꺼운</span>\n      </div>\n      <div className=\"touch-bar\">\n        <span>신축성 없는</span>\n        <div className=\"progress-bar-wrapper\">\n          <ProgressBar\n            now={(touchData.elasticity / 5) * 100}\n            style={{\n              backgroundColor: 'transparent',\n              backgroundImage: `linear-gradient(to right, ${getBarColor(touchData.elasticity, colorMapping.elasticity)} 0%, ${getBarColor(touchData.elasticity, colorMapping.elasticity)} ${(touchData.elasticity / 5) * 100}%, #ffffff ${(touchData.elasticity / 5) * 100}%, #ffffff 100%)`\n            }}\n          />\n          <div className=\"ticks\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"tick\" style={{ left: `${(i / 5) * 100}%` }} />\n            ))}\n          </div>\n        </div>\n        <span>신축성 있는</span>\n      </div>\n    </div>\n  );\n};\n\nexport default TouchInfo;\n","__webpack_require__.h = () => (\"afeb2820c66bd3d0a6a1\")"],"names":["React","ProgressBar","TouchInfo","touchData","hardness","roughness","thickness","elasticity","getBarColor","score","color","opacity","hexOpacity","Math","round","toString","padStart","concat","colorMapping","createElement","className","now","style","backgroundColor","backgroundImage","_toConsumableArray","Array","map","_","i","key","left"],"sourceRoot":""}