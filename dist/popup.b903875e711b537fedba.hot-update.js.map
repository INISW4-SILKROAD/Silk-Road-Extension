{"version":3,"file":"popup.b903875e711b537fedba.hot-update.js","mappings":"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","sources":["webpack://silkroad/./src/popup/Main.jsx","webpack://silkroad/webpack/runtime/getFullHash"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { HashRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';\r\n// import './css/Main.css';\r\n// import TouchInfo from './components/TouchInfo';\r\n// import GoodsList from './components/GoodsList';\r\n// import Detail from './Detail';\r\n// import None from './None';\r\n// import Home from './Home';\r\n\r\n// const Main = () => {\r\n//   const navigate = useNavigate();\r\n//   const [touchInfo, setTouchInfo] = useState(null);\r\n//   const [searchResults, setSearchResults] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSearchResults = () => {\r\n//       if (chrome.storage && chrome.storage.local) {\r\n//         chrome.storage.local.get(['searchResults'], (result) => {\r\n//           if (result.searchResults) {\r\n//             const touchInfoData = result.searchResults.filter(item => item.portion && item.texture_img);\r\n//             if (touchInfoData.length > 0) {\r\n//               setTouchInfo(touchInfoData[0]);\r\n//               setSearchResults(result.searchResults);\r\n//               navigate('/main');\r\n//             } else {\r\n//               navigate('/none');\r\n//             }\r\n//           } else {\r\n//             navigate('/home');\r\n//           }\r\n//         });\r\n//       } else {\r\n//         console.error('chrome.storage.local 에러');\r\n//       }\r\n//     };\r\n\r\n//     if (chrome.runtime && chrome.runtime.onMessage) {\r\n//       chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//         if (message.action === 'updateMain') {\r\n//           fetchSearchResults();\r\n//         }\r\n//       });\r\n//     } else {\r\n//       console.error('chrome.runtime.onMessage 에러');\r\n//     }\r\n\r\n\r\n//   }, [navigate]);\r\n\r\n//   return (\r\n//     <div className=\"popup-container\">\r\n//       <Routes>\r\n//         <Route path=\"/\" element={<Home />} />\r\n//         <Route path=\"/main\" element={\r\n//           touchInfo ? (\r\n//             <>\r\n//               <TouchInfo />\r\n//               <GoodsList onImageClick={(id) => navigate(`/detail/${id}`)} />\r\n//             </>\r\n//           ) : searchResults ? (\r\n//             <>\r\n//               <GoodsList onImageClick={(id) => navigate(`/detail/${id}`)} />\r\n//             </>\r\n//           ) : (\r\n//             <div>Loading...</div>\r\n//           )\r\n//         } />\r\n//         <Route path=\"/detail/:id\" element={<Detail />} />\r\n//         <Route path=\"/none\" element={<None />} />\r\n//       </Routes>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Main;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { HashRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';\r\nimport './css/Main.css';\r\nimport TouchInfo from './components/TouchInfo';\r\nimport GoodsList from './components/GoodsList';\r\nimport Detail from './Detail';\r\nimport None from './None';\r\n\r\nconst Main = () => {\r\n  const navigate = useNavigate();\r\n  const [touchInfo, setTouchInfo] = useState(null);\r\n  const [searchResults, setSearchResults] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchSearchResults = () => {\r\n      chrome.storage.local.get(['searchResults'], (result) => {\r\n        if (result.searchResults) {\r\n          const touchInfoData = result.searchResults.filter(item => item.portion && item.texture_img);\r\n          if (touchInfoData.length > 0) {\r\n            setTouchInfo(touchInfoData[0]);\r\n            setSearchResults(result.searchResults);\r\n          } else {\r\n            navigate('/none');\r\n          }\r\n        } else {\r\n          navigate('/none');\r\n        }\r\n      });\r\n    };\r\n\r\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n      if (message.action === 'updateMain') {\r\n        fetchSearchResults();\r\n      }\r\n    });\r\n\r\n    fetchSearchResults();\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <div className=\"popup-container\">\r\n      <Routes>\r\n        <Route path=\"/\" element={<GoodsList onImageClick={(id) => navigate(`/detail/${id}`)} />} />\r\n        <Route path=\"/detail/:id\" element={<Detail />} />\r\n        <Route path=\"/none\" element={<None />} />\r\n      </Routes>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","__webpack_require__.h = () => (\"82865e1151a2c5561ea1\")"],"names":["React","useEffect","useState","HashRouter","Router","Route","Routes","useNavigate","TouchInfo","GoodsList","Detail","None","Main","navigate","_useState","_useState2","_slicedToArray","touchInfo","setTouchInfo","_useState3","_useState4","searchResults","setSearchResults","fetchSearchResults","chrome","storage","local","get","result","touchInfoData","filter","item","portion","texture_img","length","runtime","onMessage","addListener","message","sender","sendResponse","action","createElement","className","path","element","onImageClick","id","concat"],"sourceRoot":""}